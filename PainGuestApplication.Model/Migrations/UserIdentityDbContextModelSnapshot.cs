// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PainGuestApplication.Model;

namespace PainGuestApplication.Model.Migrations
{
    [DbContext(typeof(UserIdentityDbContext))]
    partial class UserIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PainGuestApplication.Model.AccessLog", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminId");

                    b.Property<string>("Browser");

                    b.Property<string>("IpAddress");

                    b.Property<int>("LoginType");

                    b.Property<string>("ReturnUrl");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AccessLogs");
                });

            modelBuilder.Entity("PainGuestApplication.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AadharNumber");

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("AddLine1");

                    b.Property<string>("AddLine2");

                    b.Property<string>("AlternateEmail");

                    b.Property<string>("B2BAccountID");

                    b.Property<string>("B2CObjectId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DOB");

                    b.Property<bool>("Disablity");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("GenderDescription");

                    b.Property<string>("LanguageID");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleInitial");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<DateTime?>("RegisteredOn");

                    b.Property<int>("RegistrationStatus");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("TerminationDate");

                    b.Property<DateTime?>("TermsAndConditionsAcceptedOn");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedByUserID");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("Usertype");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("B2BAccountID");

                    b.HasIndex("B2CObjectId")
                        .IsUnique()
                        .HasFilter("[B2CObjectId] IS NOT NULL");

                    b.HasIndex("CreatedByUserID")
                        .IsUnique()
                        .HasFilter("[CreatedByUserID] IS NOT NULL");

                    b.HasIndex("LanguageID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PainGuestApplication.Model.B2BAccount", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AddLine1");

                    b.Property<string>("AddLine2");

                    b.Property<string>("BrokerUserID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Fax");

                    b.Property<string>("GuestHouseName");

                    b.Property<string>("HrManagerUserID");

                    b.Property<string>("LanguageID");

                    b.Property<bool>("LoginEnabled");

                    b.Property<string>("Phone");

                    b.Property<string>("PrimaryContactUserID");

                    b.Property<string>("State");

                    b.Property<string>("UpdatedByUserID");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("Zip");

                    b.HasKey("ID");

                    b.HasIndex("BrokerUserID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("HrManagerUserID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("B2BAccounts");
                });

            modelBuilder.Entity("PainGuestApplication.Model.B2BAccountRoom", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("B2BAccountID");

                    b.Property<int>("Breadth");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsBedAvailable");

                    b.Property<bool>("IsCommercial");

                    b.Property<bool>("IsFurnitureAvailable");

                    b.Property<bool>("IsKitchenAvailable");

                    b.Property<bool>("IsVacant");

                    b.Property<bool>("IsVerandaAvailable");

                    b.Property<int>("Length");

                    b.Property<int>("MonthlyAmount");

                    b.Property<string>("PainGuestUserID");

                    b.Property<int>("SpaceType");

                    b.Property<int>("UnitType");

                    b.Property<string>("UpdatedByUserID");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasIndex("B2BAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PainGuestUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("B2BAccountRooms");
                });

            modelBuilder.Entity("PainGuestApplication.Model.BankAccountInformation", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<bool>("Active");

                    b.Property<string>("B2BAccountID");

                    b.Property<string>("BankName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("RoutingNumber");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("B2BAccountID");

                    b.HasIndex("UserID");

                    b.ToTable("B2BAccountInformations");
                });

            modelBuilder.Entity("PainGuestApplication.Model.Language", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Locale");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PainGuestApplication.Model.PainGuestAgreement", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvanceRentTransactionID");

                    b.Property<string>("B2BAccountID");

                    b.Property<string>("CreatedByUserID");

                    b.Property<string>("CreatedOn");

                    b.Property<string>("PainGuestID");

                    b.Property<string>("UserTermsAcceptanceID");

                    b.HasKey("ID");

                    b.HasIndex("AdvanceRentTransactionID");

                    b.HasIndex("B2BAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PainGuestID");

                    b.HasIndex("UserTermsAcceptanceID");

                    b.ToTable("PainGuestAgreements");
                });

            modelBuilder.Entity("PainGuestApplication.Model.PainGuestRoomAllotment", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("B2BAccountRoomID");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfAllotment");

                    b.Property<string>("PainGuestAgreementID");

                    b.HasKey("ID");

                    b.HasIndex("B2BAccountRoomID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PainGuestAgreementID");

                    b.ToTable("PainGuestRoomAllotments");
                });

            modelBuilder.Entity("PainGuestApplication.Model.RentTransaction", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("B2BAccountRoomID");

                    b.Property<string>("CreatedByUserID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("PainGuestID");

                    b.Property<string>("TransactionReferenceNumber");

                    b.Property<int>("Unit");

                    b.HasKey("ID");

                    b.HasIndex("B2BAccountRoomID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PainGuestID");

                    b.ToTable("RentTransactions");
                });

            modelBuilder.Entity("PainGuestApplication.Model.Review", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("B2BAccountID");

                    b.Property<string>("ReviewComment");

                    b.Property<string>("ReviewerID");

                    b.Property<int>("ReviewerRating");

                    b.Property<string>("RoomID");

                    b.HasKey("ID");

                    b.HasIndex("B2BAccountID");

                    b.HasIndex("ReviewerID");

                    b.HasIndex("RoomID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PainGuestApplication.Model.TermsAndConditions", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentType");

                    b.Property<string>("Name");

                    b.Property<string>("VersionNumber");

                    b.HasKey("ID");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("PainGuestApplication.Model.UserTermsAcceptance", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementID");

                    b.Property<string>("Browser");

                    b.Property<int>("DocumentType");

                    b.Property<string>("IpAddress");

                    b.Property<string>("TermsAndConditionsID");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("TermsAndConditionsID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTermsAcceptances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PainGuestApplication.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PainGuestApplication.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PainGuestApplication.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PainGuestApplication.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PainGuestApplication.Model.AccessLog", b =>
                {
                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.ApplicationUser", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccount", "B2BAccount")
                        .WithMany("Users")
                        .HasForeignKey("B2BAccountID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithOne("UpdatedByUser")
                        .HasForeignKey("PainGuestApplication.Model.ApplicationUser", "CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.B2BAccount", b =>
                {
                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "BrokerUser")
                        .WithMany()
                        .HasForeignKey("BrokerUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "HrManagerUser")
                        .WithMany()
                        .HasForeignKey("HrManagerUserID");

                    b.HasOne("PainGuestApplication.Model.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.B2BAccountRoom", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccount", "B2BAccount")
                        .WithMany()
                        .HasForeignKey("B2BAccountID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "PainGuestUser")
                        .WithMany()
                        .HasForeignKey("PainGuestUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.BankAccountInformation", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccount", "B2BAccount")
                        .WithMany("BankInformations")
                        .HasForeignKey("B2BAccountID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "User")
                        .WithMany("BankInformations")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.PainGuestAgreement", b =>
                {
                    b.HasOne("PainGuestApplication.Model.RentTransaction", "AdvanceRentTransaction")
                        .WithMany()
                        .HasForeignKey("AdvanceRentTransactionID");

                    b.HasOne("PainGuestApplication.Model.B2BAccount", "B2BAccount")
                        .WithMany()
                        .HasForeignKey("B2BAccountID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "PainGuest")
                        .WithMany()
                        .HasForeignKey("PainGuestID");

                    b.HasOne("PainGuestApplication.Model.UserTermsAcceptance", "UserTermsAcceptance")
                        .WithMany()
                        .HasForeignKey("UserTermsAcceptanceID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.PainGuestRoomAllotment", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccountRoom", "B2BAccountRoom")
                        .WithMany()
                        .HasForeignKey("B2BAccountRoomID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.PainGuestAgreement", "PainGuestAgreement")
                        .WithMany()
                        .HasForeignKey("PainGuestAgreementID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.RentTransaction", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccountRoom", "B2BAccountRoom")
                        .WithMany()
                        .HasForeignKey("B2BAccountRoomID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "PainGuest")
                        .WithMany()
                        .HasForeignKey("PainGuestID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.Review", b =>
                {
                    b.HasOne("PainGuestApplication.Model.B2BAccount", "B2BAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("B2BAccountID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "Reviewer")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("ReviewerID");

                    b.HasOne("PainGuestApplication.Model.B2BAccountRoom", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("PainGuestApplication.Model.UserTermsAcceptance", b =>
                {
                    b.HasOne("PainGuestApplication.Model.TermsAndConditions", "TermsAndConditions")
                        .WithMany()
                        .HasForeignKey("TermsAndConditionsID");

                    b.HasOne("PainGuestApplication.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
